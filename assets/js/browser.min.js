/* browser.js v1.0.1 | Roltres | MIT licensed */
var browser = (function () {
    "use strict";
  
    var t = {
      name: null,
      version: null,
      os: null,
      osVersion: null,
      touch: null,
      mobile: null,
      _canUse: null,
  
      // Check if a specific CSS property can be used in the browser
      canUse: function (e) {
        // Create a test element if not already created
        t._canUse ||= document.createElement("div");
  
        var n = t._canUse.style,
            r = e.charAt(0).toUpperCase() + e.slice(1); // Capitalize first letter
  
        // Check standard and vendor-prefixed versions of the property
        return (
          e in n ||
          "Moz" + r in n ||
          "Webkit" + r in n ||
          "O" + r in n ||
          "ms" + r in n
        );
      },
  
      // Initialize browser detection
      init: function () {
        var e = navigator.userAgent,
            n = "other",
            r = 0,
            i = [
              ["firefox", /Firefox\/([0-9\.]+)/],
              ["bb", /BlackBerry.+Version\/([0-9\.]+)/],
              ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/],
              ["opera", /OPR\/([0-9\.]+)/],
              ["opera", /Opera\/([0-9\.]+)/],
              ["edge", /Edge\/([0-9\.]+)/],
              ["safari", /Version\/([0-9\.]+).+Safari/],
              ["chrome", /Chrome\/([0-9\.]+)/],
              ["ie", /MSIE ([0-9]+)/],
              ["ie", /Trident\/.+rv:([0-9]+)/],
            ];
  
        // Detect browser name and version
        for (var o = 0; o < i.length; o++) {
          if (e.match(i[o][1])) {
            n = i[o][0];
            r = parseFloat(RegExp.$1);
            break;
          }
        }
  
        t.name = n;
        t.version = r;
        n = "other";
  
        // OS detection
        i = [
          ["ios", /([0-9_]+) like Mac OS X/, (e) => e.replace("_", ".").replace("_", "")],
          ["ios", /CPU like Mac OS X/, () => 0],
          ["wp", /Windows Phone ([0-9\.]+)/, null],
          ["android", /Android ([0-9\.]+)/, null],
          ["mac", /Macintosh.+Mac OS X ([0-9_]+)/, (e) => e.replace("_", ".").replace("_", "")],
          ["windows", /Windows NT ([0-9\.]+)/, null],
          ["bb", /BlackBerry.+Version\/([0-9\.]+)/, null],
          ["bb", /BB[0-9]+.+Version\/([0-9\.]+)/, null],
          ["linux", /Linux/, null],
          ["bsd", /BSD/, null],
          ["unix", /X11/, null],
        ];
  
        r = 0;
  
        // Detect OS and version
        for (o = 0; o < i.length; o++) {
          if (e.match(i[o][1])) {
            n = i[o][0];
            r = parseFloat(i[o][2] ? i[o][2](RegExp.$1) : RegExp.$1);
            break;
          }
        }
  
        // Special case: Some macOS devices are actually iPads
        if (n == "mac" && "ontouchstart" in window) {
          var isTabletScreen =
            (screen.width === 1024 && screen.height === 1366) ||
            (screen.width === 834 && screen.height === 1112) ||
            (screen.width === 810 && screen.height === 1080) ||
            (screen.width === 768 && screen.height === 1024);
          if (isTabletScreen) n = "ios";
        }
  
        // Store OS information
        t.os = n;
        t.osVersion = r;
  
        // Touchscreen detection
        t.touch =
          t.os == "wp"
            ? navigator.msMaxTouchPoints > 0
            : "ontouchstart" in window;
  
        // Mobile device detection
        t.mobile =
          t.os == "wp" ||
          t.os == "android" ||
          t.os == "ios" ||
          t.os == "bb";
      },
    };
  
    // Initialize the browser detection script
    t.init();
  
    return t;
  })();
  
  // UMD (Universal Module Definition) for compatibility
  (function (e, n) {
    if (typeof define === "function" && define.amd) {
      // AMD module
      define([], n);
    } else if (typeof exports === "object") {
      // CommonJS module
      module.exports = n();
    } else {
      // Global object
      e.browser = n();
    }
  })(this, function () {
    return browser;
  });  
